
# env
# Use the official lightweight Python image.
# https://hub.docker.com/_/python
# FROM python:3.10-slim
FROM python:3.8

# Allow statements and log messages to immediately appear in the Knative logs
ENV PYTHONUNBUFFERED True

# Copy local code to the container image. (note this script is being called from the home dir)
ENV APP_HOME /app
WORKDIR $APP_HOME
COPY . ./

# Testing
RUN pwd
RUN ls 

# Install production dependencies.
# RUN pip install -r webapp_requirements.txt
RUN pip install -r webApp/webapp_requirements.txt

# Run the web service on container startup. Here we use the gunicorn
# webserver, with one worker process and 8 threads.
# For environments with multiple CPU cores, increase the number of workers
# to be equal to the cores available.
# Timeout is set to 0 to disable the timeouts of the workers to allow Cloud Run to handle instance scaling.
# CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 main:app
# CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 webApp/main:app
# ENTRYPOINT FLASK_APP=/webApp/main.py flask run --host=0.0.0.0
ENTRYPOINT ["python"]
CMD ["webApp/main.py"]

# Deploy from the skai directory (not webApp directory) using the following command:
# ```
# export PROJECT_ID="$(gcloud config get-value project)"
# homedir=$(pwd)
# gcloud run deploy --source $homedir/webApp
# ```
# If prompted to enable the API, Reply y to enable.
# When you are prompted for the service name, enter: damage-assessment-app
# If you are prompted to enable the Artifact Registry API, respond by pressing y.
# When you are prompted for region: select the region of your choice, for example us-central1.
# You will be prompted to allow unauthenticated invocations: respond y .
# Then wait a few moments until the deployment is complete. On success, the command line displays the service URL.